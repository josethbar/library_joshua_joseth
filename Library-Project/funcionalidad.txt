-- database: c:\Users\Dell\Desktop\backEnd\library_joshua_joseth\Library-Project\Library.sqlite3
-- Use the ▷ button in the top right corner to run the entire file.
SELECT
    *
FROM
    "table-name";

SELECT
    *
FROM
    "REVIEW";

-- ------------------------------------------------------------------------
CREATE TABLE
    BOOK (
        ISBN INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Name VARCHAR(250),
        Release_Date Date,
        Rent_Amount INTEGER NOT NULL,
        Inventary_ID INTEGER NOT NULL,
        Description VARCHAR,
        FOREIGN KEY (Inventary_ID) REFERENCES INVENTARY (Inventary_ID)
    );

SELECT
    *
FROM
    BOOK;

CREATE INDEX search_book ON BOOK (Name, ISBN);

INSERT INTO
    BOOK (
        Name,
        Release_Date,
        Rent_Amount,
        Inventary_ID,
        Description
    )
VALUES
    (
        "Odisea",
        "1800",
        12000,
        1,
        " La historia narra el viaje de regreso del héroe Odiseo a su patria, la isla de Ítaca, tras su participación en la guerra de Troya. Su travesía estará llena de peligros y aventuras. 'La Odisea' es una metáfora del viaje que es la vida para todos nosotros; de ahí que sea un clásico universal."
    ),
    (
        "Don Quijote de la Mancha",
        "1600",
        420000,
        2,
        "El libro relata las aventuras y desventuras de un hidalgo de 50 años llamado Alonso Quijano, quien decide ser un caballero andante como aquellos que aparecen en sus libros de caballerías favoritos. Las hazañas de don Quijote están contenidas en dos tomos que narran tres salidas."
    ),
    (
        "El código Da Vinci",
        "2003",
        8000,
        3,
        "La mayor conspiración de los últimos 2000 años está a punto de ser desvelada. Robert Langdon recibe una llamada en mitad de la noche: el conservador del museo del Louvre ha sido asesinado en extrañas circunstancias y junto a su cadáver ha aparecido un desconcertante mensaje cifrado."
    ),
    (
        "Diez negritos",
        "1939",
        9000,
        4,
        "Diez personas sin relación alguna entre sí son reunidas en un misterioso islote de la costa inglesa por un tal Sr. Owen, propietario de una lujosa mansión a la par que perfecto desconocido para todos sus invitados. Tras la primera cena, y sin haber conocido aún a su anfitrión, los diez comensales son acusados mediante una grabación de haber cometido un crimen en el pasado. Uno por uno, a partir de ese momento, son asesinados sin explicación ni motivo aparente. Sólo una vieja canción infantil parece encerrar el misterio de una creciente pesadilla."
    ),
    (
        "Alicia en el país de las maravillas",
        "1865",
        11000,
        5,
        "La historia cuenta cómo una niña llamada Alicia cae por un agujero, encontrándose en un mundo peculiar y extraño, poblado por humanos y criaturas antropomórficas. El libro juega con la lógica, dando a la novela gran popularidad tanto en niños como en adultos."
    ),
    (
        "Las aventuras de Sherlock Holmes",
        "1892",
        11000,
        6,
        "Las aventuras de el famoso detective Británico y su amigo el Dr. Watson, se trata de una recopilación de doce relatos cortos. En cada uno de ellos hay un enigma que resolver. Los protagonistas hacen uso de la observación y deducción para tratar de resolverlos."
    ),
    (
        "El Hobbit",
        "1920",
        13000,
        7,
        "La historia narra el viaje de un hobbit llamado Bilbo Bolsón (tío de Frodo, uno de los protagonistas principales de El Señor de los Anillos), al que no le gustan las aventuras, a la Montaña Solitaria en busca del tesoro robado por el dragón Smaug años atrás."
    ),
    (
        "El señor de los anillos",
        "1937",
        13000,
        8,
        "La novela narra el viaje del protagonista principal, Frodo Bolsón, hobbit de la Comarca, para destruir el Anillo Único y la consiguiente guerra que provocará el enemigo para recuperarlo, ya que es la principal fuente de poder de su creador, el señor oscuro Sauron."
    ),
    (
        "El alquimista",
        "1988",
        9000,
        9,
        "Poderosa, sencilla, sabia e inspiradora, ésta es la historia de Santiago, un joven pastor andaluz que viaja desde su tierra natal hacia el desierto egipcio en busca de un tesoro oculto en las pirámides. Nadie sabe lo que contiene el tesoro, ni si Santiago será capaz de superar los obstáculos del camino."
    ),
    (
        "1984",
        "1948",
        8000,
        10,
        "Winston Smith trabaja en el Ministerio de la Verdad reescribiendo y retocando la historia para un estado totalitario que somete de forma despiadada a la población, hasta que siente que no quiere contribuir más a este sistema perverso y decide rebelarse."
    ),
    (
        "Los hombres que no amaban a las mujeres",
        "2005",
        8000,
        11,
        "Harriet Vanger desapareció hace treinta y seis años en una isla sueca propiedad de su poderosa familia. A pesar del despliegue policial, no se encontró ni rastro de la muchacha. ¿Se escapó? ¿Fue secuestrada? ¿Asesinada? El caso está cerrado y los detalles olvidados. Pero su tío Henrik Vanger, un empresario retirado, vive obsesionado con resolver el misterio antes de morir. En las paredes de su estudio cuelgan cuarenta y tres flores secas y enmarcadas. Las primeras siete fueron regalos de su sobrina; las otras llegaron puntualmente para su cumpleaños, de forma anónima, desde que Harriet desapareció."
    ),
    (
        "Guerra y Paz",
        "1865",
        11000,
        12,
        "Con la campaña napoleónica -Austerlitz, Borodinó o el incendio de Moscú- como trasfondo, se narra la historia de dos familias de la nobleza rusa, los Bolkonski y los Rostov, protagonistas de un mundo que empieza a escenificar su propia desaparición."
    );

select
    *
from
    BOOK;

DROP TABLE BOOK;

-- ------------------------------------------------------------------------
CREATE TABLE
    Book_Orders (
        Book_OrdersID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        ISBN INTEGER NOT NULL,
        OrdersID INTEGER NOT NULL,
        FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN),
        FOREIGN KEY (OrdersID) REFERENCES Orders (OrdersID)
    );

INSERT INTO
    Book_Orders (ISBN, OrdersID)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12);

SELECT
    *
FROM
    Book_Orders;

DROP TABLE Book_Orders;

-- ------------------------------------------------------------------------
CREATE TABLE
    INVENTARY (
        Inventary_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Quantity_Available INTEGER NOT NULL,
        Total_Amount INTEGER NOT NULL,
        Borrowed_Books INTEGER NOT NULL
    );

INSERT INTO
    INVENTARY (Quantity_Available, Total_Amount, Borrowed_Books)
VALUES
    (20, 20, 20),
    (20, 20, 20),
    (30, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20),
    (20, 20, 20);

SELECT
    *
FROM
    INVENTARY;

DROP TABLE INVENTARY;

-- ------------------------------------------------------------------------
CREATE TABLE
    Author_book (
        autor_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Author_ID INTEGER NOT NULL,
        ISBN INTEGER NOT NULL,
        FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN),
        FOREIGN KEY (Author_ID) REFERENCES AUTHOR (Author_ID)
    );

INSERT INTO
    Author_book (Author_ID, ISBN)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12);

SELECT
    *
FROM
    Author_book;

DROP TABLE Author_book;

-- ------------------------------------------------------------------------
CREATE TABLE
    AUTHOR (
        Author_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        name_author VARCHAR(250)
    );

INSERT INTO
    AUTHOR (name_author)
VALUES
    ('Homero'),
    ('Miguel de Cervantes'),
    ('Dan Brown'),
    ('Agatha Christie'),
    ('Lewis Carroll'),
    ('Arthur Conan Doyle'),
    ('J.R.R. Tolkien'),
    ('J.R.R. Tolkien'),
    ('Paulo Coelho'),
    ('George Orwell'),
    ('Stieg Larsson'),
    ('León Tolstói');

SELECT
    *
FROM
    AUTHOR;

DROP TABLE AUTHOR;

-- ------------------------------------------------------------------------
CREATE TABLE
    Orders (
        OrdersID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Client_ID INTEGER NOT NULL,
        Book_rented VARCHAR(250),
        Rented_Day VARCHAR(250),
        Return_Date VARCHAR(250),
        Order_StateID VARCHAR(250),
        FOREIGN KEY (Client_ID) REFERENCES USER (Client_ID) FOREIGN KEY (Order_StateID) REFERENCES Order_State (Order_StateID)
    );

INSERT INTO
    Orders (
        Client_ID,
        Book_rented,
        Rented_Day,
        Return_Date,
        Order_StateID
    )
VALUES
    (1, 'Odisea', '12-04-2023', '12-06-2023', 1),
    (
        2,
        'Don Quijote De la Mancha',
        '24-07-2023',
        '24-09-2023',
        2
    ),
    (
        3,
        'El código Da Vinci',
        '17-03-2023',
        '17-05-2023',
        1
    ),
    (4, 'Diez Negritos', '15-02-2023', '15-04-2023', 2),
    (
        5,
        'Alicia En el país de la maravillas',
        '11-08-2023',
        '11-10-2023',
        3
    ),
    (
        6,
        'Las aventuras de Sherlock Holmes',
        '02-01-2023',
        '02-03-2023',
        6
    ),
    (7, 'El Hobbit', '24-04-2023', '24-06-2023', 5),
    (
        8,
        'El señor de los anillos',
        '29-06-2023',
        '29-08-2023',
        4
    ),
    (9, 'El alquimista', '03-03-2023', '03-05-2023', 5),
    (10, '1984', '10-02-2023', '10-04-2023', 4),
    (
        11,
        'Los hombres que no amaban a las mujeres',
        '18-07-2023',
        '18-07-2023',
        6
    ),
    (12, 'Guerra y paz', '12-09-2023', '12-11-2023', 4);

SELECT
    *
FROM
    Orders;

DROP TABLE Orders;

-- ------------------------------------------------------------------------
CREATE TABLE
    Order_State (
        Order_StateID INTEGER PRIMARY KEY NOT NULL,
        State VARCHAR(50)
    );

INSERT INTO
    Order_State (State)
VALUES
    ('pending'),
    ('delivered'),
    ('rented');

DROP TABLE Order_State;

SELECT
    *
FROM
    Order_State;

-- ------------------------------------------------------------------------
CREATE TABLE
    USER (
        OrdersID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Client_ID INTEGER NOT NULL,
        Book_rented VARCHAR(250),
        Rented_Day DATE,
        Return_Date VARCHAR(250),
        Order_StateID VARCHAR(250),
        FOREIGN KEY (Order_StateID) REFERENCES Order_State (Order_StateID),
        FOREIGN KEY (Client_ID) REFERENCES USER (Client_ID)
    );

INSERT INTO
    USER (
        Name,
        phoneNumber,
        Email,
        Type_ID,
        Password,
        Pay_MethodID
    )
VALUES
    (
        'joseth',
        7777 -7777,
        'wvalleb@fwdcostarica.com',
        1,
        'lambada',
        1
    ),
    (
        'Joshua',
        8888 -8888,
        'jgatjensc@fwdcostarica.com',
        2,
        'fwdcostarica',
        2
    ),
    (
        'Belén',
        9999 -9999,
        'bmondragonc@fwdcostarica.com',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Jordan',
        1010 -1010,
        'ejemplousuario1@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Marco',
        1111 -1111,
        'ejemplousuario2@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Bryan',
        2222 -2222,
        'ejemplousuario3@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Deylan',
        3333 -3333,
        'ejemplousuario4@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Wilby',
        4444 -4444,
        'ejemplousuario5@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Charles',
        5555 -5555,
        'ejemplousuario6@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Raúl',
        6666 -6666,
        'ejemplousuario7@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Gustavo',
        6666 -5555,
        'ejemplousuario8@fwdcostarica',
        1,
        'fwdcostarica',
        1
    ),
    (
        'Roger',
        4444 -3333,
        'ejemplousuario9@fwdcostarica',
        1,
        'fwdcostarica',
        1
    );

SELECT
    *
FROM
    USER;

DROP TABLE USER;

-- ------------------------------------------------------------------------
CREATE TABLE
    TYPE (
        Type_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Description VARCHAR(250),
        State VARCHAR(250)
    );

INSERT INTO
    TYPE (Description, State)
VALUES
    ('client', 'active'),
    ('admin', 'active');

DROP TABLE TYPE;

SELECT
    *
FROM
    TYPE;

-- ------------------------------------------------------------------------
CREATE TABLE
    PAY_METHOD (
        Pay_MethodID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        Description VARCHAR(250),
        State VARCHAR(250)
    );

INSERT INTO
    PAY_METHOD (Description, State)
VALUES
    ('credit card', 'active'),
    ('paypal', 'inactive'),
    ('debit card', 'active'),
    ('cash', 'active'),
    ('sinpe', 'active'),
    ('bitcoin', 'inactive'),
    ('transference', 'active');

SELECT
    *
FROM
    PAY_METHOD;

DROP TABLE PAY_METHOD;

-- ------------------------------------------------------------------------
CREATE TABLE
    REVIEW (
        ReviewID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        ISBN INTEGER NOT NULL,
        Client_ID INTEGER NOT NULL,
        CommentDate DATETIME,
        Text VARCHAR,
        Grade Real NOT NULL,
        FOREIGN KEY (ISBN) REFERENCES BOOK (ISBN),
        FOREIGN KEY (Client_ID) REFERENCES USER (Client_ID)
    );

INSERT INTO
    REVIEW (ISBN, Client_ID, CommentDate, Text, Grade)
VALUES
    (
        1,
        1,
        '18-07-2023',
        'Me pareció un libro muy interesante',
        4.5
    ),
    (
        2,
        2,
        '26-09-2023',
        'No lo he terminado pero me está gustando bastante',
        4.2
    ),
    (3, 3, '27-08-2022', 'No me gustó ', 2),
    (
        4,
        4,
        '16-09-2021',
        'siento que le hace falta desarrollo de persoaje',
        3.4
    ),
    (
        5,
        5,
        '26-09-2022',
        'adoro el personaje principal',
        5
    ),
    (6, 6, '01-01-2023', 'ta bom', 4.5),
    (7, 7, '06-01-2023', 'Me gustó', 4),
    (8, 8, '15-04-2023', 'que bonitoooooooo', 4.3),
    (
        9,
        9,
        '22-03-2023',
        'no lo pude terminar, muy aburrido',
        2.4
    ),
    (
        10,
        10,
        '23-06-2023',
        'no puedo esperar el siguiente libro',
        5
    ),
    (
        11,
        11,
        '22-04-2023',
        'Me gustó pero se me hizo muy corto',
        4.3
    ),
    (
        12,
        12,
        '10-02-2023',
        'No me lo vuelvo a leer ni aunque me paguen, ni aunque mi vida dependa de ello.',
        0
    );

SELECT
    *
FROM
    REVIEW;

DROP TABLE REVIEW;

-- ------------------------------------------------------------------------
CREATE TABLE
    Genre_Book (
        Genre INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        ISBN_ID INTEGER NOT NULL,
        genr_id INTEGER NOT NULL,
        FOREIGN KEY (ISBN_ID) REFERENCES BOOK (ISBN),
        FOREIGN KEY (genr_id) REFERENCES Genre_Book (Genre)
    );

INSERT INTO
    Genre_Book (ISBN_ID, genr_id)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12);

SELECT
    *
FROM
    Genre_Book;

DROP TABLE Genre_Book;

-- ------------------------------------------------------------------------
CREATE TABLE
    GENRE (
        genr_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(250)
        -- FOREIGN KEY (genr_id) REFERENCES Genre_Book (genr_id)
    );

INSERT INTO
    GENRE (name)
VALUES
    ('Poesía'),
    ('Novela Literaria'),
    ('Novela Contemporánea'),
    ('Novela Negra'),
    ('Juvenil'),
    ('Fantasía'),
    ('Fantasía'),
    ('Novela Contemporánea'),
    ('Novela Literaria'),
    ('Novela Contemporánea'),
    ('Novela Literaria');

SELECT
    *
FROM
    GENRE;

DROP TABLE GENRE;

CREATE TABLE
    Inventary_Users (
        Inventary_UsersID INTEGER PRIMARY KEY NOT NULL,
        Inventary_ID INTEGER NOT NULL,
        Client_ID INTEGER NOT NULL,
        FOREIGN KEY (Inventary_ID) REFERENCES INVENTARY (Inventary_ID),
        FOREIGN KEY (Client_ID) REFERENCES USER (Client_ID)
    );

INSERT INTO
    Inventary_Users (Inventary_ID, Client_ID)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12);

DROP TABLE Inventary_Users;

SELECT
    *
FROM
    Inventary_Users;

-- ------------------------------------------------------------------------
-- ----------------------------------------
--                   FUNCIONALIDAD
-- ----------------------------------------
-- ----------------FUNCIONALIADAD CLIENTES---------------------------------
-- ---------------------INGRESAR LIBRO------------
-- Actualizar el inventario: agregando nuevos libros, actualizando cantidad de ejemplares de un libro se
-- tienen disponibles
UPDATE INVENTARY
SET
    Quantity_Available = Quantity_Available + 1
WHERE
    Inventary_ID = 1
    AND (
        SELECT
            TYPE.description
        FROM
            USER
            INNER JOIN TYPE ON USER.Type_ID = TYPE.Type_ID
        WHERE
            USER.Client_ID = 2
    ) = 'admin';

INSERT OR REPLACE INTO
    Orders (Client_ID, Book_rented, Rented_Day, Return_Date)
VALUES
    (11, "Guerra y paz", "19/09/2023", "23/10/2023");

------------------(Feedback/Review)------------------
-- SELECT REVIEW.ReviewID FROM REVIEW
----------(Libros mayores a 3 de calificación)-------------
SELECT
    *
FROM
    REVIEW
WHERE
    Grade > 3;

-- ------------order
SELECT
    BOOK.Name,
    BOOK.Rent_Amount,
    PAY_METHOD.Description
FROM
    BOOK
    INNER JOIN PAY_METHOD ON BOOK.ISBN = PAY_METHOD.Pay_MethodID;

------------------
UPDATE Orders
SET
    Return_Date = 13 / 09 / 2023
WHERE
    OrdersID = 5;

UPDATE Orders
SET
    Rented_Day = "not return"
WHERE
    OrdersID = 1;

---------------------actualizR INVENTARIO al agregar libro
CREATE TRIGGER actu_inventary AFTER INSERT ON Orders BEGIN
UPDATE INVENTARY
SET
    Quantity_Available = Quantity_Available -1
WHERE
    Inventary_ID IN (
        SELECT
            i.Inventary_ID
        FROM
            Orders o
            JOIN Book_Orders bs ON bs.Book_OrdersID = o.OrdersID
            JOIN BOOK b ON b.ISBN = bs.ISBN
            JOIN INVENTARY i ON i.Inventary_ID = b.Inventary_ID
        WHERE
            o.OrdersID = New.OrdersID
    );

END;

UPDATE INVENTARY
SET
    Borrowed_Books = 18
WHERE
    Inventary_ID = 1;

DROP TRIGGER actu_inventary;

-- ------------------
SELECT
    i.Inventary_ID
FROM
    Orders o
    JOIN USER u ON u.Client_ID = o.OrdersID
    JOIN Book_Orders bs ON bs.Book_OrdersID = o.OrdersID
    JOIN BOOK b ON b.ISBN = bs.ISBN
    JOIN INVENTARY i ON i.Inventary_ID = b.Inventary_ID
WHERE
    o.OrdersID = 1;

-----------------maybe-----------------
SELECT
    i.Inventary_ID
FROM
    Orders o
    JOIN USER u ON u.Client_ID = o.OrdersID
    JOIN Book_Orders bs ON bs.Book_OrdersID = o.OrdersID
    JOIN BOOK b ON b.ISBN = bs.ISBN
    JOIN INVENTARY i ON i.Inventary_ID = b.Inventary_ID
WHERE
    o.OrdersID = 1;

----------------------este sirve-
SELECT
    i.Inventary_ID
FROM
    Orders o
    JOIN Book_Orders bs ON bs.Book_OrdersID = o.OrdersID
    JOIN BOOK b ON b.ISBN = bs.ISBN
    JOIN INVENTARY i ON i.Inventary_ID = b.Inventary_ID
WHERE
    o.OrdersID = New.OrdersID;

------ -----------------------------------------------------
-- Actualizar el estado de las órdenes o registro de libros alquilados
UPDATE Orders
SET
    Order_StateID = 1
WHERE
    OrdersID = 2
    AND (
        SELECT
            TYPE.description
        FROM
            USER
            JOIN TYPE ON USER.Type_ID == TYPE.Type_ID
        WHERE
            USER.client_ID = 2
    ) = 'admin';

------------------TRIGGER--------------------
CREATE TRIGGER taked_books AFTER INSERT ON Book_Orders FOR EACH ROW BEGIN
UPDATE INVENTARY
SET
    Quantity_Available = Quantity_Available - NEW.Quantity_Available
WHERE
    Inventary_ID = NEW.OrdersID;

END;

----------(Libros mayores a 3 de calificación)-------------
SELECT
    *
FROM
    REVIEW
WHERE
    Grade > 3;

----------(Libros del mismo género)-------------
SELECT
    COUNT(genr_id) AS 'CANTIDAD DE LIBROS DEL MISMO GÉNERO',
    name
FROM
    GENRE
GROUP BY
    name;

----------(consulta:libros que terminan y empiezan con...)-------------
SELECT
    Name
FROM
    BOOK
WHERE
    Name LIKE 'El%';

SELECT
    Name
FROM
    BOOK
WHERE
    Name LIKE '%s';

----------(Libros alquilados el último mes)-------------
-- para jooooshhhhhhhhhhhhhhhhhhhhhhhhhhh
-- SELECT
--     INVENTARY.Quantity_Available,
--     PAY_METHOD.State,
--     REVIEW.Text,
--     BOOK.Name
-- FROM
--     INVENTARY
--     INNER JOIN PAY_METHOD ON INVENTARY.Inventary_ID = PAY_METHOD.Pay_MethodID
--     INNER JOIN REVIEW ON INVENTARY.Inventary_ID = REVIEW.ReviewID
--     INNER JOIN BOOK ON INVENTARY.Inventary_ID = BOOK.ISBN;
-- ------------(consulta para el libro mayor alquilado el mes anterior)--------------
SELECT
    count(Rented_Day) 'mas rentado',
    Rented_Day,
    BOOK.Name
FROM
    Orders
    JOIN BOOK ON Orders.OrdersID = BOOK.ISBN
WHERE
    Rented_Day BETWEEN "29/08/2023" AND "29/09/2023";

SELECT
    count(Borrowed_Books),
    BOOK.Name
FROM
    INVENTARY
    JOIN BOOK on INVENTARY.Inventary_ID = BOOK.ISBN
WHERE
    Rented_Day BETWEEN "29/08/2023" AND "29/09/2023";

--    Rented_Day BETWEEN '29-08-2023' AND '29-9-2023';
------------------------------------------------ 
SELECT
    INVENTARY.Quantity_Available,
    BOOK.ISBN
FROM
    INVENTARY i
    INNER JOIN BOOK ON INVENTARY.Inventary_ID = BOOK.ISBN
WHERE
    Quantity_Available = 0;

-- -- -------------Consulta que nos permita saber cuáles libros no se encuentran en el inventario pero si en la
-- tabla de libros
SELECT
    Quantity_Available,
    b.Name
FROM
    INVENTARY i
    JOIN BOOK b ON b.Inventary_ID = i.Inventary_ID
WHERE
    Quantity_Available = 0;

-- SELECT
--     Quantity_Available,
--     ISBN_ID,
--     b.Name
-- FROM
--     Inventory i
--     JOIN Book b ON b.ISBN = i.
--     WHERE quantity_avaible = 0;
----------(Libros alquilados el último mes)-------------
SELECT
    Orders.Rented_Day,
    USER.Email,
    BOOK.Name,
    Book_Orders.OrdersID
FROM
    Orders
    JOIN USER ON Orders.Client_ID = USER.Client_ID
    JOIN Book_Orders ON Book_Orders.OrdersID = Orders.OrdersID
    JOIN BOOK ON Book_Orders.ISBN = BOOK.ISBN
WHERE
    Orders.Rented_Day = DATE('2023-09-18');

SELECT
    Inventary_Users.Inventary_ID,
    GENRE.name,
    BOOK.Name,
    AUTHOR.name_author
FROM
    Inventary_Users
    JOIN GENRE on Inventary_Users.Inventary_UsersID = GENRE.genr_id
    JOIN BOOK ON Inventary_Users.Inventary_ID = BOOK.ISBN
    JOIN AUTHOR ON Inventary_Users.Inventary_ID = AUTHOR.Author_ID
WHERE
    BOOK.Name = 'Odisea'
    OR GENRE.name = 'Terror';

------------------(Libros alquilados por día)----------------------
SELECT
    AVG(Borrowed_Books),
    Rented_Day,
    ISBN
FROM
    INVENTARY
    JOIN book ON BOOK.ISBN = INVENTARY.Inventary_ID
    JOIN Book_Orders ON Book_Orders.Book_OrdersID = BOOK.ISBN
    JOIN Orders ON Orders.OrdersID = Book_Orders.Book_OrdersID
    JOIN Rented_Book;

SELECT
    avg(borrowed),
    depart_date,
    inventory.inventory_id
FROM
    inventory
    JOIN book b ON b.book_id = inventory.book_id
    JOIN book_order ob ON ob.book_id = b.book_id
    JOIN orders o ON o.orders_id = ob.orders_id
    JOIN rented_type rt ON rt.rented_type_id = o.rented_type_id
WHERE
    depart_date = '2023-08-2'
    AND rt.name_type = 'for rent';
